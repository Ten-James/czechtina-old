package czechtina.grammar

val czechtina = mapOf<GrammarToken, String>(
    GrammarToken.TYPE_VOID to "void",
    GrammarToken.TYPE_INTEGER to "cel[eay]",
    GrammarToken.TYPE_DECIMAL to "desetinn[eay]",
    GrammarToken.TYPE_BOOLEAN to "bool",
    GrammarToken.TYPE_CHAR to "znak",
    GrammarToken.TYPE_POINTER to "ukazatel|pointer",
    GrammarToken.TYPE_ADDRESS to "adresa",
    GrammarToken.TYPE_VALUE to "hodnota",
    GrammarToken.TYPE_ARRAY to "pole",
    GrammarToken.OPERATOR_PLUS to "plus",
    GrammarToken.OPERATOR_MINUS to "minus",
    GrammarToken.OPERATOR_MULTIPLY to "krat",
    GrammarToken.OPERATOR_DIVIDE to "deleno",
    GrammarToken.OPERATOR_MODULO to "modulo",
    GrammarToken.OPERATOR_ASSIGN to "je",
    GrammarToken.OPERATOR_ASSIGN_PLUS to "pricti",
    GrammarToken.OPERATOR_ASSIGN_MINUS to "odecti",
    GrammarToken.OPERATOR_ASSIGN_MULTIPLY to "vynasob",
    GrammarToken.OPERATOR_ASSIGN_DIVIDE to "vydel",
    GrammarToken.OPERATOR_ASSIGN_MODULO to "zbytkuj",
    GrammarToken.OPERATOR_EQUAL to "je presne",
    GrammarToken.OPERATOR_NOT_EQUAL to "neni presne",
    GrammarToken.OPERATOR_LESS to "mensi",
    GrammarToken.OPERATOR_LESS_OR_EQUAL to "mensi nebo rovno",
    GrammarToken.OPERATOR_GREATER to "vetsi",
    GrammarToken.OPERATOR_GREATER_OR_EQUAL to "vetsi nebo rovno",
    GrammarToken.OPERATOR_AND to "azaroven",
    GrammarToken.OPERATOR_OR to "anebo",
    GrammarToken.OPERATOR_NOT to "neni|ne",
    GrammarToken.OPERATOR_ITERATE to "->",
    GrammarToken.KEYWORD_IF to "kdyz|pokud",
    GrammarToken.KEYWORD_ELSE to "jinak|nebo",
    GrammarToken.KEYWORD_WHILE to "dokud",
    GrammarToken.KEYWORD_FOR to "opakuj",
    GrammarToken.KEYWORD_RETURN to "vrat",
    GrammarToken.KEYWORD_BREAK to "veget",
    GrammarToken.KEYWORD_CONTINUE to "pokracuj",
    GrammarToken.KEYWORD_VAR_DEFINITION to ":",
    GrammarToken.KEYWORD_IMPORT to "pripoj cz",
    GrammarToken.KEYWORD_IMPORT_C to "pripoj c",
    GrammarToken.KEYWORD_FUNCTION_CALL to "zavolej",
    GrammarToken.KEYWORD_RANGE_DEFINITION to "do|az",
    GrammarToken.KEYWORD_TYPE_DEFINITION to "typ",
    GrammarToken.KEYWORD_AS to "jako|as",
    GrammarToken.KEYWORD_STRUCT to "struct",
    GrammarToken.VARIABLE to "[a-z][a-zA-Z0-9]*",
)
val C = mapOf<GrammarToken,String>(
    GrammarToken.TYPE_VOID to "void",
    GrammarToken.TYPE_INTEGER to "int",
    GrammarToken.TYPE_DECIMAL to "double",
    GrammarToken.TYPE_BOOLEAN to "bool",
    GrammarToken.TYPE_CHAR to "char",
    GrammarToken.TYPE_POINTER to "\\*",
    GrammarToken.TYPE_ARRAY to "array",
    GrammarToken.OPERATOR_PLUS to "\\+",
    GrammarToken.OPERATOR_MINUS to "-",
    GrammarToken.OPERATOR_MULTIPLY to "\\*",
    GrammarToken.OPERATOR_DIVIDE to "/",
    GrammarToken.OPERATOR_MODULO to "%",
    GrammarToken.OPERATOR_ASSIGN to "=",
    GrammarToken.OPERATOR_ASSIGN_PLUS to "\\+=",
    GrammarToken.OPERATOR_ASSIGN_MINUS to "-=",
    GrammarToken.OPERATOR_ASSIGN_MULTIPLY to "\\*=",
    GrammarToken.OPERATOR_ASSIGN_DIVIDE to "/=",
    GrammarToken.OPERATOR_ASSIGN_MODULO to "%=",
    GrammarToken.OPERATOR_EQUAL to "==",
    GrammarToken.OPERATOR_NOT_EQUAL to "!=",
    GrammarToken.OPERATOR_LESS to "<",
    GrammarToken.OPERATOR_LESS_OR_EQUAL to "<=",
    GrammarToken.OPERATOR_GREATER to ">",
    GrammarToken.OPERATOR_GREATER_OR_EQUAL to ">=",
    GrammarToken.OPERATOR_AND to "&&",
    GrammarToken.OPERATOR_OR to "\\|\\|",
    GrammarToken.OPERATOR_NOT to "!",
    GrammarToken.KEYWORD_IF to "if",
    GrammarToken.KEYWORD_ELSE to "else",
    GrammarToken.KEYWORD_WHILE to "while",
    GrammarToken.KEYWORD_FOR to "for",
    GrammarToken.KEYWORD_RETURN to "return",
    GrammarToken.KEYWORD_BREAK to "break",
    GrammarToken.KEYWORD_TYPE_DEFINITION to "typedef",
    GrammarToken.KEYWORD_CONTINUE to "continue",
    GrammarToken.VARIABLE to "[a-z][a-zA-Z0-9_]*",
)